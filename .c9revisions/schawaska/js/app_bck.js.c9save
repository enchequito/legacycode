{"ts":1354791615591,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1354791821760,"patch":[[{"diffs":[[1,"App = null;\r\n\r\nvar BaseController = null;\r\nvar BaseArrayController = null;\r\nvar BaseView = null;\r\nvar FadeInView = null;\r\n\r\nvar initialize = function() {\r\n    BaseController = Em.Controller.extend();\r\n    BaseView = Em.View.extend();\r\n    FadeInView = BaseView.extend({\r\n        didInsertElement: function() {\r\n            this.$().hide().fadeIn('slow');\r\n        }\r\n    });\r\n    BaseArrayController = Em.ArrayController.extend();\r\n};\r\n\r\n\r\n$(function() {\r\n\r\n    initialize();\r\n    \r\n    App = Em.Application.create();\r\n    \r\n    App.ApplicationController = BaseController.extend();\r\n    \r\n    App.NavBarItem = Em.Object.extend({\r\n        displayText: '',\r\n        routePath: '',\r\n        routeName: '',\r\n        url: '#'\r\n    });\r\n\r\n    App.NavigationController = BaseArrayController.extend({\r\n        content: [],\r\n        selected: null,\r\n        init: function() {\r\n            \r\n            this._super();\r\n            this.pushObject(\r\n                App.NavBarItem.create({\r\n                    displayText: 'Home',\r\n                    routeName: 'home',\r\n                    routePath: 'root.index.home'\r\n                })\r\n            );\r\n            this.pushObject(\r\n                App.NavBarItem.create({\r\n                    displayText: 'Links/Resources',\r\n                    routeName: 'resources',\r\n                    routePath: 'root.index.resources'\r\n                })\r\n            );\r\n            this.pushObject(\r\n                App.NavBarItem.create({\r\n                    displayText: 'Ember Tutorials',\r\n                    routeName: 'tutorials',\r\n                    routePath: 'root.index.tutorials'\r\n                })\r\n            );\r\n            this.pushObject(\r\n                App.NavBarItem.create({\r\n                    displayText: 'Contact',\r\n                    routeName: 'contact',\r\n                    routePath: 'root.index.contact'\r\n                })\r\n            );\r\n        }        \r\n    });\r\n    \r\n    App.HomeController = BaseArrayController.extend({\r\n    \r\n    });\r\n    \r\n    \r\n    App.Resource = Em.Object.extend({\r\n        htmlText: function() {\r\n            return new Handlebars.SafeString(this.get('text'));\r\n        }.property('text'),\r\n        text: '',\r\n        url: '', \r\n        target: '_blank',\r\n        description: '',\r\n        category: ''\r\n    });\r\n    \r\n    App.ResourcesController = BaseArrayController.extend({\r\n        content: [],\r\n        categories: ['All', 'Handlebars', 'Ember', 'Ember Data', 'Bootstrap', 'Other'],\r\n        categorySelected: 'All',\r\n        filtered: function() {\r\n            if(this.get('categorySelected') == \"All\") {\r\n                return this.get('content');                                        \r\n            } else {\r\n                return this.get(\"content\")\r\n                           .filterProperty(\r\n                               \"category\",\r\n                               this.get('categorySelected')\r\n                           );\r\n            }            \r\n        }.property('content.@each', 'categorySelected'),\r\n        filteredCount: function() {\r\n            return this.get('filtered').length;                                        \r\n        }.property('content.@each', 'categorySelected'),\r\n        hasItems: function() {\r\n            return this.get('filtered').length > 0;\r\n        }.property('filteredCount'), \r\n        init: function() {\r\n            this._super();\r\n\r\n            this.pushObject(\r\n                App.Resource.create({\r\n                    text: 'StackOverflow with <em>ember.js</em> tag',\r\n                    url: 'http://stackoverflow.com/questions/tagged/ember.js?sort=votes',\r\n                    description: 'Takes you to a list of general questions/answers about Ember.js',\r\n                    category: 'Ember'\r\n                })\r\n            );\r\n            this.pushObject(\r\n                App.Resource.create({\r\n                    text: 'StackOverflow with <em>ember-data</em> tag',\r\n                    url: 'http://stackoverflow.com/questions/tagged/ember-data?sort=votes',\r\n                    description: 'Takes you to a list of questions/answers about Ember Data',\r\n                    category: 'Ember Data'\r\n                })\r\n            );\r\n            this.pushObject(\r\n                App.Resource.create({\r\n                    text: 'Getting Started With EmberJS',\r\n                    url: 'http://andymatthews.net/read/2012/03/07/Getting-Started-With-EmberJS',\r\n                    description: 'Introductory article about Ember.js by Andy Matthews',\r\n                    category: 'Ember'\r\n                })\r\n            );\r\n            this.pushObject(\r\n                App.Resource.create({\r\n                    text: 'Flame on! A beginner\\'s guide to Ember.js',\r\n                    url: 'http://www.adobe.com/devnet/html5/articles/flame-on-a-beginners-guide-to-emberjs.html',\r\n                    description: 'Introductory article about Ember.js by Andy Matthews touching several beginner subjects',\r\n                    category: 'Ember'\r\n                })\r\n            );\r\n            this.pushObject(\r\n                App.Resource.create({\r\n                    text: 'Video: Tom Dale speaking on PragueJS',\r\n                    url: 'http://www.youtube.com/watch?v=djhAsWGOImk',\r\n                    description: 'Video: Tom Dale speaking on PragueJS',\r\n                    category: 'Ember Data'\r\n                })\r\n            );\r\n            this.pushObject(\r\n                App.Resource.create({\r\n                    text: 'JavaScript Templating with Handlebars',\r\n                    url: 'http://javascriptplayground.com/blog/2012/05/javascript-templating-handlebars-tutorial',\r\n                    description: 'JavaScript Templating with Handlebars',\r\n                    category: 'Handlebars'\r\n                })    \r\n            );\r\n            this.pushObject(\r\n                App.Resource.create({\r\n                    text: 'Ember/Handlebars template precompilation with Play',\r\n                    url: 'http://eng.netwallet.com/2012/04/25/emberhandlebars-template-precompilation-with-play/',\r\n                    description: 'Ember/Handlebars template precompilation with Play',\r\n                    category: 'Handlebars'\r\n                })    \r\n            );\r\n            this.pushObject(\r\n                App.Resource.create({\r\n                    text: 'Game On: Backbone and Ember',\r\n                    url: 'http://net.tutsplus.com/tutorials/javascript-ajax/game-on-backbone-and-ember/',\r\n                    description: 'Game On: Backbone and Ember',\r\n                    category: 'Other'\r\n                })    \r\n            );\r\nthis.pushObject(\r\n                App.Resource.create({\r\n                    text: 'List of running Ember-Bootstrap controls and code',\r\n                    url: 'http://jzajpt.github.com/ember-bootstrap/',\r\n                    description: 'List of running Ember-Bootstrap controls and code',\r\n                    category: 'Bootstrap'\r\n                })    \r\n            );\r\n\r\n        }\r\n    });    \r\n    \r\n    App.ContactController = BaseArrayController.extend({\r\n    \r\n    });\r\n\r\n    App.ApplicationView = BaseView.extend({ \r\n        templateName: 'app-view' \r\n    });\r\n\r\n    App.TutorialsController = BaseArrayController.extend({\r\n        \r\n    });\r\n\r\n    App.TutorialsView = FadeInView.extend({\r\n        templateName: 'tutorials-view'\r\n    });\r\n\r\n    App.NavigationView = BaseView.extend({\r\n        templateName: 'top-nav-bar',\r\n        selectedBinding: 'controller.selected',\r\n        NavigationItemView: BaseView.extend({\r\n            tagName: 'li',\r\n            classNameBindings: 'isActive:active'.w(),\r\n            isActive: function() {\r\n                return this.get('menu') === this.get('parentView.selected');\r\n            }.property('item', 'parentView.selected').cacheable(),\r\n        })\r\n    });\r\n    \r\n    App.HomeView = FadeInView.extend({\r\n        templateName: 'home-view',\r\n        watchVideo: function(e) {\r\n            Bootstrap.ModalPane.popup({\r\n                heading: \"YouTube Video\",\r\n                message: '<div>Will the real Mitt Romney please stand up?</div><div><iframe width=\"530\" height=\"315\" src=\"http://www.youtube.com/embed/bxch-yi14BE\" frameborder=\"0\" allowfullscreen></iframe></div></div>',\r\n                primary: \"OK\",\r\n                secondary: \"Cancel\",\r\n                showBackdrop: true,\r\n                callback: function (opts, event) {\r\n                }\r\n            });        \r\n        }\r\n    });\r\n    \r\n    App.ResourcesView = FadeInView.extend({\r\n        templateName: 'resources-view'\r\n    });\r\n\r\n    App.ContactView = FadeInView.extend({\r\n        templateName: 'contact-view'                \r\n    });\r\n    \r\n    \r\n\r\n    App.Router = Em.Router.extend({\r\n        enableLogging: true,\r\n        location: 'hash',\r\n\r\n        root: Em.Route.extend({\r\n            \r\n            navigateTo: function (router, context){\r\n                // sets the document title with the route name, but you \r\n                // could have another property that keeps the title here\r\n                $(document).attr('title', context.context.get('routeName'));\r\n                // set the route name on the 'selected' property in the controller\r\n                router.set('navigationController.selected', context.context.get('routeName'));\r\n                // finaly transitions to the route that's provided by the model\r\n                router.transitionTo(context.context.get('routePath'), context.context);\r\n            },\r\n            navigateToResources: function (router, context) {\r\n                // since this is not called from a nav link which has a\r\n                // model, the selected and the route must be set manually\r\n                router.set('navigationController.selected','resources');\r\n                router.transitionTo('root.index.resources');\r\n            },\r\n            index: Em.Route.extend({\r\n                route: '/',\r\n                connectOutlets: function(router) {\r\n                    router.get('applicationController').connectOutlet('navigation', 'navigation');\r\n                },\r\n                home: Em.Route.extend({\r\n                    route: '/',\r\n                    connectOutlets: function (router, context) {\r\n                         router.get('applicationController').connectOutlet('home');\r\n                    }\r\n                }),\r\n                resources: Em.Route.extend({\r\n                    route: '/resources',\r\n                    connectOutlets: function (router, context) {\r\n                        router.get('applicationController').connectOutlet('resources');\r\n                    }\r\n                }),\r\n                tutorials: Em.Route.extend({\r\n                    route: '/tutorials',\r\n                    connectOutlets: function (router, context) {\r\n                        router.get('applicationController').connectOutlet('tutorials');\r\n                    }\r\n                }),\r\n                contact: Em.Route.extend({\r\n                    route: '/contact',\r\n                    connectOutlets: function (router, context) {\r\n                        router.get('applicationController').connectOutlet('contact');\r\n                    }\r\n                })\r\n            })          \r\n        })\r\n    });\r\n    \r\n    App.initialize();\r\n    \r\n});\r\n​"]],"start1":0,"start2":0,"length1":0,"length2":11344}]],"length":11344,"saved":false}
