{"ts":1355935127983,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"(function() {\n  var I18n, findTemplate, getPath, isBinding, isTranslatedAttribute, pluralForm;\n\n  isTranslatedAttribute = /(.+)Translation$/;\n\n  getPath = Ember.Handlebars.getPath || Ember.getPath;\n\n  if (typeof CLDR !== \"undefined\" && CLDR !== null) pluralForm = CLDR.pluralForm;\n\n  if (pluralForm == null) {\n    Ember.Logger.warn(\"CLDR.pluralForm not found. Em.I18n will not support count-based inflection.\");\n  }\n\n  findTemplate = function(key, setOnMissing) {\n    var result;\n    ember_assert(\"You must provide a translation key string, not %@\".fmt(key), typeof key === 'string');\n    result = I18n.translations[key];\n    if (setOnMissing) {\n      if (result == null) {\n        result = I18n.translations[key] = I18n.compile(\"Missing translation: \" + key);\n      }\n    }\n    if ((result != null) && !$.isFunction(result)) {\n      result = I18n.translations[key] = I18n.compile(result);\n    }\n    return result;\n  };\n\n  I18n = {\n    compile: Handlebars.compile,\n    translations: {},\n    template: function(key, count) {\n      var interpolatedKey, result, suffix;\n      if ((count != null) && (pluralForm != null)) {\n        suffix = pluralForm(count);\n        interpolatedKey = \"%@.%@\".fmt(key, suffix);\n        result = findTemplate(interpolatedKey, false);\n      }\n      return result != null ? result : result = findTemplate(key, true);\n    },\n    t: function(key, context) {\n      var template;\n      if (context == null) context = {};\n      template = I18n.template(key, context.count);\n      return template(context);\n    },\n    TranslateableAttributes: Em.Mixin.create({\n      didInsertElement: function() {\n        var attribute, isTranslatedAttributeMatch, key, path, result, translatedValue;\n        result = this._super.apply(this, arguments);\n        for (key in this) {\n          path = this[key];\n          isTranslatedAttributeMatch = key.match(isTranslatedAttribute);\n          if (isTranslatedAttributeMatch) {\n            attribute = isTranslatedAttributeMatch[1];\n            translatedValue = I18n.t(path);\n            this.$().attr(attribute, translatedValue);\n          }\n        }\n        return result;\n      }\n    })\n  };\n\n  Em.I18n = I18n;\n\n  Ember.I18n = I18n;\n\n  isBinding = /(.+)Binding$/;\n\n  Handlebars.registerHelper('t', function(key, options) {\n    var attrs, context, elementID, result, tagName, view;\n    context = this;\n    attrs = options.hash;\n    view = options.data.view;\n    tagName = attrs.tagName || 'span';\n    delete attrs.tagName;\n    elementID = \"i18n-\" + (jQuery.uuid++);\n    Em.keys(attrs).forEach(function(property) {\n      var bindPath, currentValue, invoker, isBindingMatch, observer, propertyName;\n      isBindingMatch = property.match(isBinding);\n      if (isBindingMatch) {\n        propertyName = isBindingMatch[1];\n        bindPath = attrs[property];\n        currentValue = getPath(context, bindPath);\n        attrs[propertyName] = currentValue;\n        invoker = null;\n        observer = function() {\n          var elem, newValue;\n          newValue = getPath(context, bindPath);\n          elem = view.$(\"#\" + elementID);\n          if (elem.length === 0) {\n            Em.removeObserver(context, bindPath, invoker);\n            return;\n          }\n          attrs[propertyName] = newValue;\n          return elem.html(I18n.t(key, attrs));\n        };\n        invoker = function() {\n          return Em.run.once(observer);\n        };\n        return Em.addObserver(context, bindPath, invoker);\n      }\n    });\n    result = '<%@ id=\"%@\">%@</%@>'.fmt(tagName, elementID, I18n.t(key, attrs), tagName);\n    return new Handlebars.SafeString(result);\n  });\n\n  Handlebars.registerHelper('translateAttr', function(options) {\n    var attrs, result;\n    attrs = options.hash;\n    result = [];\n    Em.keys(attrs).forEach(function(property) {\n      var translatedValue;\n      translatedValue = I18n.t(attrs[property]);\n      return result.push('%@=\"%@\"'.fmt(property, translatedValue));\n    });\n    return new Handlebars.SafeString(result.join(' '));\n  });\n\n}).call(this);\n"]],"start1":0,"start2":0,"length1":0,"length2":4018}]],"length":4018}
